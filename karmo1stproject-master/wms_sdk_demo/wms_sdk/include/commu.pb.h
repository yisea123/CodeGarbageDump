// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commu.proto

#ifndef PROTOBUF_commu_2eproto__INCLUDED
#define PROTOBUF_commu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_commu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRequestHeaderImpl();
void InitDefaultsRequestHeader();
void InitDefaultsResponseHeaderImpl();
void InitDefaultsResponseHeader();
void InitDefaultsNotifyHeaderImpl();
void InitDefaultsNotifyHeader();
void InitDefaultsRequestDataImpl();
void InitDefaultsRequestData();
void InitDefaultsResponseDataImpl();
void InitDefaultsResponseData();
void InitDefaultsNotifyDataImpl();
void InitDefaultsNotifyData();
inline void InitDefaults() {
  InitDefaultsRequestHeader();
  InitDefaultsResponseHeader();
  InitDefaultsNotifyHeader();
  InitDefaultsRequestData();
  InitDefaultsResponseData();
  InitDefaultsNotifyData();
}
}  // namespace protobuf_commu_2eproto
namespace commu {
class NotifyData;
class NotifyDataDefaultTypeInternal;
extern NotifyDataDefaultTypeInternal _NotifyData_default_instance_;
class NotifyHeader;
class NotifyHeaderDefaultTypeInternal;
extern NotifyHeaderDefaultTypeInternal _NotifyHeader_default_instance_;
class RequestData;
class RequestDataDefaultTypeInternal;
extern RequestDataDefaultTypeInternal _RequestData_default_instance_;
class RequestHeader;
class RequestHeaderDefaultTypeInternal;
extern RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
class ResponseData;
class ResponseDataDefaultTypeInternal;
extern ResponseDataDefaultTypeInternal _ResponseData_default_instance_;
class ResponseHeader;
class ResponseHeaderDefaultTypeInternal;
extern ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
}  // namespace commu
namespace commu {

// ===================================================================

class RequestHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commu.RequestHeader) */ {
 public:
  RequestHeader();
  virtual ~RequestHeader();

  RequestHeader(const RequestHeader& from);

  inline RequestHeader& operator=(const RequestHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestHeader(RequestHeader&& from) noexcept
    : RequestHeader() {
    *this = ::std::move(from);
  }

  inline RequestHeader& operator=(RequestHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestHeader* internal_default_instance() {
    return reinterpret_cast<const RequestHeader*>(
               &_RequestHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(RequestHeader* other);
  friend void swap(RequestHeader& a, RequestHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestHeader& from);
  void MergeFrom(const RequestHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:commu.RequestHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_commu_2eproto::TableStruct;
  friend void ::protobuf_commu_2eproto::InitDefaultsRequestHeaderImpl();
};
// -------------------------------------------------------------------

class ResponseHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commu.ResponseHeader) */ {
 public:
  ResponseHeader();
  virtual ~ResponseHeader();

  ResponseHeader(const ResponseHeader& from);

  inline ResponseHeader& operator=(const ResponseHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseHeader(ResponseHeader&& from) noexcept
    : ResponseHeader() {
    *this = ::std::move(from);
  }

  inline ResponseHeader& operator=(ResponseHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseHeader* internal_default_instance() {
    return reinterpret_cast<const ResponseHeader*>(
               &_ResponseHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ResponseHeader* other);
  friend void swap(ResponseHeader& a, ResponseHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseHeader& from);
  void MergeFrom(const ResponseHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string err_msg = 3;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 3;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_err_msg(::std::string&& value);
  #endif
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // int32 err_no = 2;
  void clear_err_no();
  static const int kErrNoFieldNumber = 2;
  ::google::protobuf::int32 err_no() const;
  void set_err_no(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:commu.ResponseHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::int32 err_no_;
  mutable int _cached_size_;
  friend struct ::protobuf_commu_2eproto::TableStruct;
  friend void ::protobuf_commu_2eproto::InitDefaultsResponseHeaderImpl();
};
// -------------------------------------------------------------------

class NotifyHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commu.NotifyHeader) */ {
 public:
  NotifyHeader();
  virtual ~NotifyHeader();

  NotifyHeader(const NotifyHeader& from);

  inline NotifyHeader& operator=(const NotifyHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyHeader(NotifyHeader&& from) noexcept
    : NotifyHeader() {
    *this = ::std::move(from);
  }

  inline NotifyHeader& operator=(NotifyHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyHeader* internal_default_instance() {
    return reinterpret_cast<const NotifyHeader*>(
               &_NotifyHeader_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NotifyHeader* other);
  friend void swap(NotifyHeader& a, NotifyHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyHeader* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyHeader* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyHeader& from);
  void MergeFrom(const NotifyHeader& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::uint32 type() const;
  void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:commu.NotifyHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_commu_2eproto::TableStruct;
  friend void ::protobuf_commu_2eproto::InitDefaultsNotifyHeaderImpl();
};
// -------------------------------------------------------------------

class RequestData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commu.RequestData) */ {
 public:
  RequestData();
  virtual ~RequestData();

  RequestData(const RequestData& from);

  inline RequestData& operator=(const RequestData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestData(RequestData&& from) noexcept
    : RequestData() {
    *this = ::std::move(from);
  }

  inline RequestData& operator=(RequestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestData* internal_default_instance() {
    return reinterpret_cast<const RequestData*>(
               &_RequestData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(RequestData* other);
  friend void swap(RequestData& a, RequestData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestData* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestData& from);
  void MergeFrom(const RequestData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .commu.RequestHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::commu::RequestHeader& header() const;
  ::commu::RequestHeader* release_header();
  ::commu::RequestHeader* mutable_header();
  void set_allocated_header(::commu::RequestHeader* header);

  // @@protoc_insertion_point(class_scope:commu.RequestData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::commu::RequestHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_commu_2eproto::TableStruct;
  friend void ::protobuf_commu_2eproto::InitDefaultsRequestDataImpl();
};
// -------------------------------------------------------------------

class ResponseData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commu.ResponseData) */ {
 public:
  ResponseData();
  virtual ~ResponseData();

  ResponseData(const ResponseData& from);

  inline ResponseData& operator=(const ResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResponseData(ResponseData&& from) noexcept
    : ResponseData() {
    *this = ::std::move(from);
  }

  inline ResponseData& operator=(ResponseData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ResponseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResponseData* internal_default_instance() {
    return reinterpret_cast<const ResponseData*>(
               &_ResponseData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ResponseData* other);
  friend void swap(ResponseData& a, ResponseData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResponseData* New() const PROTOBUF_FINAL { return New(NULL); }

  ResponseData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ResponseData& from);
  void MergeFrom(const ResponseData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ResponseData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .commu.ResponseHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::commu::ResponseHeader& header() const;
  ::commu::ResponseHeader* release_header();
  ::commu::ResponseHeader* mutable_header();
  void set_allocated_header(::commu::ResponseHeader* header);

  // @@protoc_insertion_point(class_scope:commu.ResponseData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::commu::ResponseHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_commu_2eproto::TableStruct;
  friend void ::protobuf_commu_2eproto::InitDefaultsResponseDataImpl();
};
// -------------------------------------------------------------------

class NotifyData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:commu.NotifyData) */ {
 public:
  NotifyData();
  virtual ~NotifyData();

  NotifyData(const NotifyData& from);

  inline NotifyData& operator=(const NotifyData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NotifyData(NotifyData&& from) noexcept
    : NotifyData() {
    *this = ::std::move(from);
  }

  inline NotifyData& operator=(NotifyData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyData* internal_default_instance() {
    return reinterpret_cast<const NotifyData*>(
               &_NotifyData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(NotifyData* other);
  friend void swap(NotifyData& a, NotifyData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NotifyData* New() const PROTOBUF_FINAL { return New(NULL); }

  NotifyData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NotifyData& from);
  void MergeFrom(const NotifyData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NotifyData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes body = 2;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  const ::std::string& body() const;
  void set_body(const ::std::string& value);
  #if LANG_CXX11
  void set_body(::std::string&& value);
  #endif
  void set_body(const char* value);
  void set_body(const void* value, size_t size);
  ::std::string* mutable_body();
  ::std::string* release_body();
  void set_allocated_body(::std::string* body);

  // .commu.NotifyHeader header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::commu::NotifyHeader& header() const;
  ::commu::NotifyHeader* release_header();
  ::commu::NotifyHeader* mutable_header();
  void set_allocated_header(::commu::NotifyHeader* header);

  // @@protoc_insertion_point(class_scope:commu.NotifyData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr body_;
  ::commu::NotifyHeader* header_;
  mutable int _cached_size_;
  friend struct ::protobuf_commu_2eproto::TableStruct;
  friend void ::protobuf_commu_2eproto::InitDefaultsNotifyDataImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeader

// uint32 type = 1;
inline void RequestHeader::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 RequestHeader::type() const {
  // @@protoc_insertion_point(field_get:commu.RequestHeader.type)
  return type_;
}
inline void RequestHeader::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:commu.RequestHeader.type)
}

// -------------------------------------------------------------------

// ResponseHeader

// uint32 type = 1;
inline void ResponseHeader::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 ResponseHeader::type() const {
  // @@protoc_insertion_point(field_get:commu.ResponseHeader.type)
  return type_;
}
inline void ResponseHeader::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:commu.ResponseHeader.type)
}

// int32 err_no = 2;
inline void ResponseHeader::clear_err_no() {
  err_no_ = 0;
}
inline ::google::protobuf::int32 ResponseHeader::err_no() const {
  // @@protoc_insertion_point(field_get:commu.ResponseHeader.err_no)
  return err_no_;
}
inline void ResponseHeader::set_err_no(::google::protobuf::int32 value) {
  
  err_no_ = value;
  // @@protoc_insertion_point(field_set:commu.ResponseHeader.err_no)
}

// string err_msg = 3;
inline void ResponseHeader::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseHeader::err_msg() const {
  // @@protoc_insertion_point(field_get:commu.ResponseHeader.err_msg)
  return err_msg_.GetNoArena();
}
inline void ResponseHeader::set_err_msg(const ::std::string& value) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commu.ResponseHeader.err_msg)
}
#if LANG_CXX11
inline void ResponseHeader::set_err_msg(::std::string&& value) {
  
  err_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commu.ResponseHeader.err_msg)
}
#endif
inline void ResponseHeader::set_err_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commu.ResponseHeader.err_msg)
}
inline void ResponseHeader::set_err_msg(const char* value, size_t size) {
  
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commu.ResponseHeader.err_msg)
}
inline ::std::string* ResponseHeader::mutable_err_msg() {
  
  // @@protoc_insertion_point(field_mutable:commu.ResponseHeader.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseHeader::release_err_msg() {
  // @@protoc_insertion_point(field_release:commu.ResponseHeader.err_msg)
  
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseHeader::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    
  } else {
    
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:commu.ResponseHeader.err_msg)
}

// -------------------------------------------------------------------

// NotifyHeader

// uint32 type = 1;
inline void NotifyHeader::clear_type() {
  type_ = 0u;
}
inline ::google::protobuf::uint32 NotifyHeader::type() const {
  // @@protoc_insertion_point(field_get:commu.NotifyHeader.type)
  return type_;
}
inline void NotifyHeader::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:commu.NotifyHeader.type)
}

// -------------------------------------------------------------------

// RequestData

// .commu.RequestHeader header = 1;
inline bool RequestData::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void RequestData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::commu::RequestHeader& RequestData::header() const {
  const ::commu::RequestHeader* p = header_;
  // @@protoc_insertion_point(field_get:commu.RequestData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::commu::RequestHeader*>(
      &::commu::_RequestHeader_default_instance_);
}
inline ::commu::RequestHeader* RequestData::release_header() {
  // @@protoc_insertion_point(field_release:commu.RequestData.header)
  
  ::commu::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::commu::RequestHeader* RequestData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::commu::RequestHeader;
  }
  // @@protoc_insertion_point(field_mutable:commu.RequestData.header)
  return header_;
}
inline void RequestData::set_allocated_header(::commu::RequestHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:commu.RequestData.header)
}

// bytes body = 2;
inline void RequestData::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestData::body() const {
  // @@protoc_insertion_point(field_get:commu.RequestData.body)
  return body_.GetNoArena();
}
inline void RequestData::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commu.RequestData.body)
}
#if LANG_CXX11
inline void RequestData::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commu.RequestData.body)
}
#endif
inline void RequestData::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commu.RequestData.body)
}
inline void RequestData::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commu.RequestData.body)
}
inline ::std::string* RequestData::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:commu.RequestData.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestData::release_body() {
  // @@protoc_insertion_point(field_release:commu.RequestData.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestData::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:commu.RequestData.body)
}

// -------------------------------------------------------------------

// ResponseData

// .commu.ResponseHeader header = 1;
inline bool ResponseData::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ResponseData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::commu::ResponseHeader& ResponseData::header() const {
  const ::commu::ResponseHeader* p = header_;
  // @@protoc_insertion_point(field_get:commu.ResponseData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::commu::ResponseHeader*>(
      &::commu::_ResponseHeader_default_instance_);
}
inline ::commu::ResponseHeader* ResponseData::release_header() {
  // @@protoc_insertion_point(field_release:commu.ResponseData.header)
  
  ::commu::ResponseHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::commu::ResponseHeader* ResponseData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::commu::ResponseHeader;
  }
  // @@protoc_insertion_point(field_mutable:commu.ResponseData.header)
  return header_;
}
inline void ResponseData::set_allocated_header(::commu::ResponseHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:commu.ResponseData.header)
}

// bytes body = 2;
inline void ResponseData::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResponseData::body() const {
  // @@protoc_insertion_point(field_get:commu.ResponseData.body)
  return body_.GetNoArena();
}
inline void ResponseData::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commu.ResponseData.body)
}
#if LANG_CXX11
inline void ResponseData::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commu.ResponseData.body)
}
#endif
inline void ResponseData::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commu.ResponseData.body)
}
inline void ResponseData::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commu.ResponseData.body)
}
inline ::std::string* ResponseData::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:commu.ResponseData.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResponseData::release_body() {
  // @@protoc_insertion_point(field_release:commu.ResponseData.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResponseData::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:commu.ResponseData.body)
}

// -------------------------------------------------------------------

// NotifyData

// .commu.NotifyHeader header = 1;
inline bool NotifyData::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void NotifyData::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::commu::NotifyHeader& NotifyData::header() const {
  const ::commu::NotifyHeader* p = header_;
  // @@protoc_insertion_point(field_get:commu.NotifyData.header)
  return p != NULL ? *p : *reinterpret_cast<const ::commu::NotifyHeader*>(
      &::commu::_NotifyHeader_default_instance_);
}
inline ::commu::NotifyHeader* NotifyData::release_header() {
  // @@protoc_insertion_point(field_release:commu.NotifyData.header)
  
  ::commu::NotifyHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::commu::NotifyHeader* NotifyData::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::commu::NotifyHeader;
  }
  // @@protoc_insertion_point(field_mutable:commu.NotifyData.header)
  return header_;
}
inline void NotifyData::set_allocated_header(::commu::NotifyHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:commu.NotifyData.header)
}

// bytes body = 2;
inline void NotifyData::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NotifyData::body() const {
  // @@protoc_insertion_point(field_get:commu.NotifyData.body)
  return body_.GetNoArena();
}
inline void NotifyData::set_body(const ::std::string& value) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:commu.NotifyData.body)
}
#if LANG_CXX11
inline void NotifyData::set_body(::std::string&& value) {
  
  body_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:commu.NotifyData.body)
}
#endif
inline void NotifyData::set_body(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:commu.NotifyData.body)
}
inline void NotifyData::set_body(const void* value, size_t size) {
  
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:commu.NotifyData.body)
}
inline ::std::string* NotifyData::mutable_body() {
  
  // @@protoc_insertion_point(field_mutable:commu.NotifyData.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NotifyData::release_body() {
  // @@protoc_insertion_point(field_release:commu.NotifyData.body)
  
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyData::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    
  } else {
    
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:commu.NotifyData.body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_commu_2eproto__INCLUDED
