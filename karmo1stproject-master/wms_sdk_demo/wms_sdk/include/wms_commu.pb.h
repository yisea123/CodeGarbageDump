// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wms_commu.proto

#ifndef PROTOBUF_wms_5fcommu_2eproto__INCLUDED
#define PROTOBUF_wms_5fcommu_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_wms_5fcommu_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCarryTaskInfoImpl();
void InitDefaultsCarryTaskInfo();
void InitDefaultsLiftTaskInfoImpl();
void InitDefaultsLiftTaskInfo();
void InitDefaultsRollerTaskInfoImpl();
void InitDefaultsRollerTaskInfo();
void InitDefaultsTractionTaskInfoImpl();
void InitDefaultsTractionTaskInfo();
void InitDefaultsSubTaskDataImpl();
void InitDefaultsSubTaskData();
void InitDefaultsWmsTaskInfoImpl();
void InitDefaultsWmsTaskInfo();
void InitDefaultsWmsTaskDataImpl();
void InitDefaultsWmsTaskData();
void InitDefaultsDoTaskRequestImpl();
void InitDefaultsDoTaskRequest();
void InitDefaultsCancelTaskRequestImpl();
void InitDefaultsCancelTaskRequest();
void InitDefaultsDoTaskResponseImpl();
void InitDefaultsDoTaskResponse();
void InitDefaultsTaskProgressNotifyImpl();
void InitDefaultsTaskProgressNotify();
inline void InitDefaults() {
  InitDefaultsCarryTaskInfo();
  InitDefaultsLiftTaskInfo();
  InitDefaultsRollerTaskInfo();
  InitDefaultsTractionTaskInfo();
  InitDefaultsSubTaskData();
  InitDefaultsWmsTaskInfo();
  InitDefaultsWmsTaskData();
  InitDefaultsDoTaskRequest();
  InitDefaultsCancelTaskRequest();
  InitDefaultsDoTaskResponse();
  InitDefaultsTaskProgressNotify();
}
}  // namespace protobuf_wms_5fcommu_2eproto
namespace wms_commu {
class CancelTaskRequest;
class CancelTaskRequestDefaultTypeInternal;
extern CancelTaskRequestDefaultTypeInternal _CancelTaskRequest_default_instance_;
class CarryTaskInfo;
class CarryTaskInfoDefaultTypeInternal;
extern CarryTaskInfoDefaultTypeInternal _CarryTaskInfo_default_instance_;
class DoTaskRequest;
class DoTaskRequestDefaultTypeInternal;
extern DoTaskRequestDefaultTypeInternal _DoTaskRequest_default_instance_;
class DoTaskResponse;
class DoTaskResponseDefaultTypeInternal;
extern DoTaskResponseDefaultTypeInternal _DoTaskResponse_default_instance_;
class LiftTaskInfo;
class LiftTaskInfoDefaultTypeInternal;
extern LiftTaskInfoDefaultTypeInternal _LiftTaskInfo_default_instance_;
class RollerTaskInfo;
class RollerTaskInfoDefaultTypeInternal;
extern RollerTaskInfoDefaultTypeInternal _RollerTaskInfo_default_instance_;
class SubTaskData;
class SubTaskDataDefaultTypeInternal;
extern SubTaskDataDefaultTypeInternal _SubTaskData_default_instance_;
class TaskProgressNotify;
class TaskProgressNotifyDefaultTypeInternal;
extern TaskProgressNotifyDefaultTypeInternal _TaskProgressNotify_default_instance_;
class TractionTaskInfo;
class TractionTaskInfoDefaultTypeInternal;
extern TractionTaskInfoDefaultTypeInternal _TractionTaskInfo_default_instance_;
class WmsTaskData;
class WmsTaskDataDefaultTypeInternal;
extern WmsTaskDataDefaultTypeInternal _WmsTaskData_default_instance_;
class WmsTaskInfo;
class WmsTaskInfoDefaultTypeInternal;
extern WmsTaskInfoDefaultTypeInternal _WmsTaskInfo_default_instance_;
}  // namespace wms_commu
namespace wms_commu {

// ===================================================================

class CarryTaskInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.CarryTaskInfo) */ {
 public:
  CarryTaskInfo();
  virtual ~CarryTaskInfo();

  CarryTaskInfo(const CarryTaskInfo& from);

  inline CarryTaskInfo& operator=(const CarryTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CarryTaskInfo(CarryTaskInfo&& from) noexcept
    : CarryTaskInfo() {
    *this = ::std::move(from);
  }

  inline CarryTaskInfo& operator=(CarryTaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CarryTaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarryTaskInfo* internal_default_instance() {
    return reinterpret_cast<const CarryTaskInfo*>(
               &_CarryTaskInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CarryTaskInfo* other);
  friend void swap(CarryTaskInfo& a, CarryTaskInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CarryTaskInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  CarryTaskInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CarryTaskInfo& from);
  void MergeFrom(const CarryTaskInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CarryTaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string storage_no = 1;
  void clear_storage_no();
  static const int kStorageNoFieldNumber = 1;
  const ::std::string& storage_no() const;
  void set_storage_no(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_no(::std::string&& value);
  #endif
  void set_storage_no(const char* value);
  void set_storage_no(const char* value, size_t size);
  ::std::string* mutable_storage_no();
  ::std::string* release_storage_no();
  void set_allocated_storage_no(::std::string* storage_no);

  // bytes custom_data = 2;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 2;
  const ::std::string& custom_data() const;
  void set_custom_data(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_data(::std::string&& value);
  #endif
  void set_custom_data(const char* value);
  void set_custom_data(const void* value, size_t size);
  ::std::string* mutable_custom_data();
  ::std::string* release_custom_data();
  void set_allocated_custom_data(::std::string* custom_data);

  // @@protoc_insertion_point(class_scope:wms_commu.CarryTaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr storage_no_;
  ::google::protobuf::internal::ArenaStringPtr custom_data_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsCarryTaskInfoImpl();
};
// -------------------------------------------------------------------

class LiftTaskInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.LiftTaskInfo) */ {
 public:
  LiftTaskInfo();
  virtual ~LiftTaskInfo();

  LiftTaskInfo(const LiftTaskInfo& from);

  inline LiftTaskInfo& operator=(const LiftTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LiftTaskInfo(LiftTaskInfo&& from) noexcept
    : LiftTaskInfo() {
    *this = ::std::move(from);
  }

  inline LiftTaskInfo& operator=(LiftTaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LiftTaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LiftTaskInfo* internal_default_instance() {
    return reinterpret_cast<const LiftTaskInfo*>(
               &_LiftTaskInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LiftTaskInfo* other);
  friend void swap(LiftTaskInfo& a, LiftTaskInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LiftTaskInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  LiftTaskInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LiftTaskInfo& from);
  void MergeFrom(const LiftTaskInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LiftTaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string storage_no = 1;
  void clear_storage_no();
  static const int kStorageNoFieldNumber = 1;
  const ::std::string& storage_no() const;
  void set_storage_no(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_no(::std::string&& value);
  #endif
  void set_storage_no(const char* value);
  void set_storage_no(const char* value, size_t size);
  ::std::string* mutable_storage_no();
  ::std::string* release_storage_no();
  void set_allocated_storage_no(::std::string* storage_no);

  // bytes custom_data = 3;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 3;
  const ::std::string& custom_data() const;
  void set_custom_data(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_data(::std::string&& value);
  #endif
  void set_custom_data(const char* value);
  void set_custom_data(const void* value, size_t size);
  ::std::string* mutable_custom_data();
  ::std::string* release_custom_data();
  void set_allocated_custom_data(::std::string* custom_data);

  // int32 lift_direction = 2;
  void clear_lift_direction();
  static const int kLiftDirectionFieldNumber = 2;
  ::google::protobuf::int32 lift_direction() const;
  void set_lift_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wms_commu.LiftTaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr storage_no_;
  ::google::protobuf::internal::ArenaStringPtr custom_data_;
  ::google::protobuf::int32 lift_direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsLiftTaskInfoImpl();
};
// -------------------------------------------------------------------

class RollerTaskInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.RollerTaskInfo) */ {
 public:
  RollerTaskInfo();
  virtual ~RollerTaskInfo();

  RollerTaskInfo(const RollerTaskInfo& from);

  inline RollerTaskInfo& operator=(const RollerTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollerTaskInfo(RollerTaskInfo&& from) noexcept
    : RollerTaskInfo() {
    *this = ::std::move(from);
  }

  inline RollerTaskInfo& operator=(RollerTaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollerTaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollerTaskInfo* internal_default_instance() {
    return reinterpret_cast<const RollerTaskInfo*>(
               &_RollerTaskInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(RollerTaskInfo* other);
  friend void swap(RollerTaskInfo& a, RollerTaskInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollerTaskInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  RollerTaskInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RollerTaskInfo& from);
  void MergeFrom(const RollerTaskInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RollerTaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string storage_no = 1;
  void clear_storage_no();
  static const int kStorageNoFieldNumber = 1;
  const ::std::string& storage_no() const;
  void set_storage_no(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_no(::std::string&& value);
  #endif
  void set_storage_no(const char* value);
  void set_storage_no(const char* value, size_t size);
  ::std::string* mutable_storage_no();
  ::std::string* release_storage_no();
  void set_allocated_storage_no(::std::string* storage_no);

  // bytes custom_data = 3;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 3;
  const ::std::string& custom_data() const;
  void set_custom_data(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_data(::std::string&& value);
  #endif
  void set_custom_data(const char* value);
  void set_custom_data(const void* value, size_t size);
  ::std::string* mutable_custom_data();
  ::std::string* release_custom_data();
  void set_allocated_custom_data(::std::string* custom_data);

  // int32 roller_direction = 2;
  void clear_roller_direction();
  static const int kRollerDirectionFieldNumber = 2;
  ::google::protobuf::int32 roller_direction() const;
  void set_roller_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wms_commu.RollerTaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr storage_no_;
  ::google::protobuf::internal::ArenaStringPtr custom_data_;
  ::google::protobuf::int32 roller_direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsRollerTaskInfoImpl();
};
// -------------------------------------------------------------------

class TractionTaskInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.TractionTaskInfo) */ {
 public:
  TractionTaskInfo();
  virtual ~TractionTaskInfo();

  TractionTaskInfo(const TractionTaskInfo& from);

  inline TractionTaskInfo& operator=(const TractionTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TractionTaskInfo(TractionTaskInfo&& from) noexcept
    : TractionTaskInfo() {
    *this = ::std::move(from);
  }

  inline TractionTaskInfo& operator=(TractionTaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TractionTaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TractionTaskInfo* internal_default_instance() {
    return reinterpret_cast<const TractionTaskInfo*>(
               &_TractionTaskInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(TractionTaskInfo* other);
  friend void swap(TractionTaskInfo& a, TractionTaskInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TractionTaskInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  TractionTaskInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TractionTaskInfo& from);
  void MergeFrom(const TractionTaskInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TractionTaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string storage_no = 1;
  void clear_storage_no();
  static const int kStorageNoFieldNumber = 1;
  const ::std::string& storage_no() const;
  void set_storage_no(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_no(::std::string&& value);
  #endif
  void set_storage_no(const char* value);
  void set_storage_no(const char* value, size_t size);
  ::std::string* mutable_storage_no();
  ::std::string* release_storage_no();
  void set_allocated_storage_no(::std::string* storage_no);

  // bytes custom_data = 3;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 3;
  const ::std::string& custom_data() const;
  void set_custom_data(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_data(::std::string&& value);
  #endif
  void set_custom_data(const char* value);
  void set_custom_data(const void* value, size_t size);
  ::std::string* mutable_custom_data();
  ::std::string* release_custom_data();
  void set_allocated_custom_data(::std::string* custom_data);

  // int32 direction = 2;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  ::google::protobuf::int32 direction() const;
  void set_direction(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wms_commu.TractionTaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr storage_no_;
  ::google::protobuf::internal::ArenaStringPtr custom_data_;
  ::google::protobuf::int32 direction_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsTractionTaskInfoImpl();
};
// -------------------------------------------------------------------

class SubTaskData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.SubTaskData) */ {
 public:
  SubTaskData();
  virtual ~SubTaskData();

  SubTaskData(const SubTaskData& from);

  inline SubTaskData& operator=(const SubTaskData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SubTaskData(SubTaskData&& from) noexcept
    : SubTaskData() {
    *this = ::std::move(from);
  }

  inline SubTaskData& operator=(SubTaskData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SubTaskData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubTaskData* internal_default_instance() {
    return reinterpret_cast<const SubTaskData*>(
               &_SubTaskData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SubTaskData* other);
  friend void swap(SubTaskData& a, SubTaskData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubTaskData* New() const PROTOBUF_FINAL { return New(NULL); }

  SubTaskData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SubTaskData& from);
  void MergeFrom(const SubTaskData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SubTaskData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wms_commu.SubTaskData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsSubTaskDataImpl();
};
// -------------------------------------------------------------------

class WmsTaskInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.WmsTaskInfo) */ {
 public:
  WmsTaskInfo();
  virtual ~WmsTaskInfo();

  WmsTaskInfo(const WmsTaskInfo& from);

  inline WmsTaskInfo& operator=(const WmsTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WmsTaskInfo(WmsTaskInfo&& from) noexcept
    : WmsTaskInfo() {
    *this = ::std::move(from);
  }

  inline WmsTaskInfo& operator=(WmsTaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WmsTaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WmsTaskInfo* internal_default_instance() {
    return reinterpret_cast<const WmsTaskInfo*>(
               &_WmsTaskInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(WmsTaskInfo* other);
  friend void swap(WmsTaskInfo& a, WmsTaskInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WmsTaskInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  WmsTaskInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WmsTaskInfo& from);
  void MergeFrom(const WmsTaskInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WmsTaskInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .wms_commu.SubTaskData sub_task_data = 4;
  int sub_task_data_size() const;
  void clear_sub_task_data();
  static const int kSubTaskDataFieldNumber = 4;
  const ::wms_commu::SubTaskData& sub_task_data(int index) const;
  ::wms_commu::SubTaskData* mutable_sub_task_data(int index);
  ::wms_commu::SubTaskData* add_sub_task_data();
  ::google::protobuf::RepeatedPtrField< ::wms_commu::SubTaskData >*
      mutable_sub_task_data();
  const ::google::protobuf::RepeatedPtrField< ::wms_commu::SubTaskData >&
      sub_task_data() const;

  // string task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  const ::std::string& task_id() const;
  void set_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_task_id(::std::string&& value);
  #endif
  void set_task_id(const char* value);
  void set_task_id(const char* value, size_t size);
  ::std::string* mutable_task_id();
  ::std::string* release_task_id();
  void set_allocated_task_id(::std::string* task_id);

  // bytes custom_data = 5;
  void clear_custom_data();
  static const int kCustomDataFieldNumber = 5;
  const ::std::string& custom_data() const;
  void set_custom_data(const ::std::string& value);
  #if LANG_CXX11
  void set_custom_data(::std::string&& value);
  #endif
  void set_custom_data(const char* value);
  void set_custom_data(const void* value, size_t size);
  ::std::string* mutable_custom_data();
  ::std::string* release_custom_data();
  void set_allocated_custom_data(::std::string* custom_data);

  // bool execute_by_order = 2;
  void clear_execute_by_order();
  static const int kExecuteByOrderFieldNumber = 2;
  bool execute_by_order() const;
  void set_execute_by_order(bool value);

  // bool can_skip = 3;
  void clear_can_skip();
  static const int kCanSkipFieldNumber = 3;
  bool can_skip() const;
  void set_can_skip(bool value);

  // bool goto_pack_station = 6;
  void clear_goto_pack_station();
  static const int kGotoPackStationFieldNumber = 6;
  bool goto_pack_station() const;
  void set_goto_pack_station(bool value);

  // @@protoc_insertion_point(class_scope:wms_commu.WmsTaskInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::wms_commu::SubTaskData > sub_task_data_;
  ::google::protobuf::internal::ArenaStringPtr task_id_;
  ::google::protobuf::internal::ArenaStringPtr custom_data_;
  bool execute_by_order_;
  bool can_skip_;
  bool goto_pack_station_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsWmsTaskInfoImpl();
};
// -------------------------------------------------------------------

class WmsTaskData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.WmsTaskData) */ {
 public:
  WmsTaskData();
  virtual ~WmsTaskData();

  WmsTaskData(const WmsTaskData& from);

  inline WmsTaskData& operator=(const WmsTaskData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WmsTaskData(WmsTaskData&& from) noexcept
    : WmsTaskData() {
    *this = ::std::move(from);
  }

  inline WmsTaskData& operator=(WmsTaskData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WmsTaskData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WmsTaskData* internal_default_instance() {
    return reinterpret_cast<const WmsTaskData*>(
               &_WmsTaskData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(WmsTaskData* other);
  friend void swap(WmsTaskData& a, WmsTaskData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WmsTaskData* New() const PROTOBUF_FINAL { return New(NULL); }

  WmsTaskData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WmsTaskData& from);
  void MergeFrom(const WmsTaskData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WmsTaskData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes task_data = 3;
  int task_data_size() const;
  void clear_task_data();
  static const int kTaskDataFieldNumber = 3;
  const ::std::string& task_data(int index) const;
  ::std::string* mutable_task_data(int index);
  void set_task_data(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_task_data(int index, ::std::string&& value);
  #endif
  void set_task_data(int index, const char* value);
  void set_task_data(int index, const void* value, size_t size);
  ::std::string* add_task_data();
  void add_task_data(const ::std::string& value);
  #if LANG_CXX11
  void add_task_data(::std::string&& value);
  #endif
  void add_task_data(const char* value);
  void add_task_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& task_data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_task_data();

  // int32 source = 1;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  ::google::protobuf::int32 source() const;
  void set_source(::google::protobuf::int32 value);

  // int32 task_type = 2;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 2;
  ::google::protobuf::int32 task_type() const;
  void set_task_type(::google::protobuf::int32 value);

  // int32 robot_id = 4;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 4;
  ::google::protobuf::int32 robot_id() const;
  void set_robot_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wms_commu.WmsTaskData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> task_data_;
  ::google::protobuf::int32 source_;
  ::google::protobuf::int32 task_type_;
  ::google::protobuf::int32 robot_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsWmsTaskDataImpl();
};
// -------------------------------------------------------------------

class DoTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.DoTaskRequest) */ {
 public:
  DoTaskRequest();
  virtual ~DoTaskRequest();

  DoTaskRequest(const DoTaskRequest& from);

  inline DoTaskRequest& operator=(const DoTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoTaskRequest(DoTaskRequest&& from) noexcept
    : DoTaskRequest() {
    *this = ::std::move(from);
  }

  inline DoTaskRequest& operator=(DoTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoTaskRequest* internal_default_instance() {
    return reinterpret_cast<const DoTaskRequest*>(
               &_DoTaskRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(DoTaskRequest* other);
  friend void swap(DoTaskRequest& a, DoTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoTaskRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DoTaskRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoTaskRequest& from);
  void MergeFrom(const DoTaskRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .wms_commu.WmsTaskData wms_task = 1;
  bool has_wms_task() const;
  void clear_wms_task();
  static const int kWmsTaskFieldNumber = 1;
  const ::wms_commu::WmsTaskData& wms_task() const;
  ::wms_commu::WmsTaskData* release_wms_task();
  ::wms_commu::WmsTaskData* mutable_wms_task();
  void set_allocated_wms_task(::wms_commu::WmsTaskData* wms_task);

  // @@protoc_insertion_point(class_scope:wms_commu.DoTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::wms_commu::WmsTaskData* wms_task_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsDoTaskRequestImpl();
};
// -------------------------------------------------------------------

class CancelTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.CancelTaskRequest) */ {
 public:
  CancelTaskRequest();
  virtual ~CancelTaskRequest();

  CancelTaskRequest(const CancelTaskRequest& from);

  inline CancelTaskRequest& operator=(const CancelTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelTaskRequest(CancelTaskRequest&& from) noexcept
    : CancelTaskRequest() {
    *this = ::std::move(from);
  }

  inline CancelTaskRequest& operator=(CancelTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelTaskRequest* internal_default_instance() {
    return reinterpret_cast<const CancelTaskRequest*>(
               &_CancelTaskRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(CancelTaskRequest* other);
  friend void swap(CancelTaskRequest& a, CancelTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelTaskRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelTaskRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelTaskRequest& from);
  void MergeFrom(const CancelTaskRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string wms_task_id = 1;
  void clear_wms_task_id();
  static const int kWmsTaskIdFieldNumber = 1;
  const ::std::string& wms_task_id() const;
  void set_wms_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_wms_task_id(::std::string&& value);
  #endif
  void set_wms_task_id(const char* value);
  void set_wms_task_id(const char* value, size_t size);
  ::std::string* mutable_wms_task_id();
  ::std::string* release_wms_task_id();
  void set_allocated_wms_task_id(::std::string* wms_task_id);

  // @@protoc_insertion_point(class_scope:wms_commu.CancelTaskRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wms_task_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsCancelTaskRequestImpl();
};
// -------------------------------------------------------------------

class DoTaskResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.DoTaskResponse) */ {
 public:
  DoTaskResponse();
  virtual ~DoTaskResponse();

  DoTaskResponse(const DoTaskResponse& from);

  inline DoTaskResponse& operator=(const DoTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DoTaskResponse(DoTaskResponse&& from) noexcept
    : DoTaskResponse() {
    *this = ::std::move(from);
  }

  inline DoTaskResponse& operator=(DoTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DoTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoTaskResponse* internal_default_instance() {
    return reinterpret_cast<const DoTaskResponse*>(
               &_DoTaskResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(DoTaskResponse* other);
  friend void swap(DoTaskResponse& a, DoTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DoTaskResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  DoTaskResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DoTaskResponse& from);
  void MergeFrom(const DoTaskResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DoTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string wms_task_id = 1;
  void clear_wms_task_id();
  static const int kWmsTaskIdFieldNumber = 1;
  const ::std::string& wms_task_id() const;
  void set_wms_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_wms_task_id(::std::string&& value);
  #endif
  void set_wms_task_id(const char* value);
  void set_wms_task_id(const char* value, size_t size);
  ::std::string* mutable_wms_task_id();
  ::std::string* release_wms_task_id();
  void set_allocated_wms_task_id(::std::string* wms_task_id);

  // string robot_id = 2;
  void clear_robot_id();
  static const int kRobotIdFieldNumber = 2;
  const ::std::string& robot_id() const;
  void set_robot_id(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_id(::std::string&& value);
  #endif
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  ::std::string* mutable_robot_id();
  ::std::string* release_robot_id();
  void set_allocated_robot_id(::std::string* robot_id);

  // string robot_no = 3;
  void clear_robot_no();
  static const int kRobotNoFieldNumber = 3;
  const ::std::string& robot_no() const;
  void set_robot_no(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_no(::std::string&& value);
  #endif
  void set_robot_no(const char* value);
  void set_robot_no(const char* value, size_t size);
  ::std::string* mutable_robot_no();
  ::std::string* release_robot_no();
  void set_allocated_robot_no(::std::string* robot_no);

  // @@protoc_insertion_point(class_scope:wms_commu.DoTaskResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wms_task_id_;
  ::google::protobuf::internal::ArenaStringPtr robot_id_;
  ::google::protobuf::internal::ArenaStringPtr robot_no_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsDoTaskResponseImpl();
};
// -------------------------------------------------------------------

class TaskProgressNotify : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wms_commu.TaskProgressNotify) */ {
 public:
  TaskProgressNotify();
  virtual ~TaskProgressNotify();

  TaskProgressNotify(const TaskProgressNotify& from);

  inline TaskProgressNotify& operator=(const TaskProgressNotify& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskProgressNotify(TaskProgressNotify&& from) noexcept
    : TaskProgressNotify() {
    *this = ::std::move(from);
  }

  inline TaskProgressNotify& operator=(TaskProgressNotify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskProgressNotify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskProgressNotify* internal_default_instance() {
    return reinterpret_cast<const TaskProgressNotify*>(
               &_TaskProgressNotify_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(TaskProgressNotify* other);
  friend void swap(TaskProgressNotify& a, TaskProgressNotify& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskProgressNotify* New() const PROTOBUF_FINAL { return New(NULL); }

  TaskProgressNotify* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TaskProgressNotify& from);
  void MergeFrom(const TaskProgressNotify& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TaskProgressNotify* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string wms_task_id = 1;
  void clear_wms_task_id();
  static const int kWmsTaskIdFieldNumber = 1;
  const ::std::string& wms_task_id() const;
  void set_wms_task_id(const ::std::string& value);
  #if LANG_CXX11
  void set_wms_task_id(::std::string&& value);
  #endif
  void set_wms_task_id(const char* value);
  void set_wms_task_id(const char* value, size_t size);
  ::std::string* mutable_wms_task_id();
  ::std::string* release_wms_task_id();
  void set_allocated_wms_task_id(::std::string* wms_task_id);

  // string storage_no = 2;
  void clear_storage_no();
  static const int kStorageNoFieldNumber = 2;
  const ::std::string& storage_no() const;
  void set_storage_no(const ::std::string& value);
  #if LANG_CXX11
  void set_storage_no(::std::string&& value);
  #endif
  void set_storage_no(const char* value);
  void set_storage_no(const char* value, size_t size);
  ::std::string* mutable_storage_no();
  ::std::string* release_storage_no();
  void set_allocated_storage_no(::std::string* storage_no);

  // int32 status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::protobuf::int32 status() const;
  void set_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:wms_commu.TaskProgressNotify)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr wms_task_id_;
  ::google::protobuf::internal::ArenaStringPtr storage_no_;
  ::google::protobuf::int32 status_;
  mutable int _cached_size_;
  friend struct ::protobuf_wms_5fcommu_2eproto::TableStruct;
  friend void ::protobuf_wms_5fcommu_2eproto::InitDefaultsTaskProgressNotifyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CarryTaskInfo

// string storage_no = 1;
inline void CarryTaskInfo::clear_storage_no() {
  storage_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarryTaskInfo::storage_no() const {
  // @@protoc_insertion_point(field_get:wms_commu.CarryTaskInfo.storage_no)
  return storage_no_.GetNoArena();
}
inline void CarryTaskInfo::set_storage_no(const ::std::string& value) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.CarryTaskInfo.storage_no)
}
#if LANG_CXX11
inline void CarryTaskInfo::set_storage_no(::std::string&& value) {
  
  storage_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.CarryTaskInfo.storage_no)
}
#endif
inline void CarryTaskInfo::set_storage_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.CarryTaskInfo.storage_no)
}
inline void CarryTaskInfo::set_storage_no(const char* value, size_t size) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.CarryTaskInfo.storage_no)
}
inline ::std::string* CarryTaskInfo::mutable_storage_no() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.CarryTaskInfo.storage_no)
  return storage_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarryTaskInfo::release_storage_no() {
  // @@protoc_insertion_point(field_release:wms_commu.CarryTaskInfo.storage_no)
  
  return storage_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarryTaskInfo::set_allocated_storage_no(::std::string* storage_no) {
  if (storage_no != NULL) {
    
  } else {
    
  }
  storage_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_no);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.CarryTaskInfo.storage_no)
}

// bytes custom_data = 2;
inline void CarryTaskInfo::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CarryTaskInfo::custom_data() const {
  // @@protoc_insertion_point(field_get:wms_commu.CarryTaskInfo.custom_data)
  return custom_data_.GetNoArena();
}
inline void CarryTaskInfo::set_custom_data(const ::std::string& value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.CarryTaskInfo.custom_data)
}
#if LANG_CXX11
inline void CarryTaskInfo::set_custom_data(::std::string&& value) {
  
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.CarryTaskInfo.custom_data)
}
#endif
inline void CarryTaskInfo::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.CarryTaskInfo.custom_data)
}
inline void CarryTaskInfo::set_custom_data(const void* value, size_t size) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.CarryTaskInfo.custom_data)
}
inline ::std::string* CarryTaskInfo::mutable_custom_data() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.CarryTaskInfo.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CarryTaskInfo::release_custom_data() {
  // @@protoc_insertion_point(field_release:wms_commu.CarryTaskInfo.custom_data)
  
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CarryTaskInfo::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    
  } else {
    
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.CarryTaskInfo.custom_data)
}

// -------------------------------------------------------------------

// LiftTaskInfo

// string storage_no = 1;
inline void LiftTaskInfo::clear_storage_no() {
  storage_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiftTaskInfo::storage_no() const {
  // @@protoc_insertion_point(field_get:wms_commu.LiftTaskInfo.storage_no)
  return storage_no_.GetNoArena();
}
inline void LiftTaskInfo::set_storage_no(const ::std::string& value) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.LiftTaskInfo.storage_no)
}
#if LANG_CXX11
inline void LiftTaskInfo::set_storage_no(::std::string&& value) {
  
  storage_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.LiftTaskInfo.storage_no)
}
#endif
inline void LiftTaskInfo::set_storage_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.LiftTaskInfo.storage_no)
}
inline void LiftTaskInfo::set_storage_no(const char* value, size_t size) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.LiftTaskInfo.storage_no)
}
inline ::std::string* LiftTaskInfo::mutable_storage_no() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.LiftTaskInfo.storage_no)
  return storage_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiftTaskInfo::release_storage_no() {
  // @@protoc_insertion_point(field_release:wms_commu.LiftTaskInfo.storage_no)
  
  return storage_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiftTaskInfo::set_allocated_storage_no(::std::string* storage_no) {
  if (storage_no != NULL) {
    
  } else {
    
  }
  storage_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_no);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.LiftTaskInfo.storage_no)
}

// int32 lift_direction = 2;
inline void LiftTaskInfo::clear_lift_direction() {
  lift_direction_ = 0;
}
inline ::google::protobuf::int32 LiftTaskInfo::lift_direction() const {
  // @@protoc_insertion_point(field_get:wms_commu.LiftTaskInfo.lift_direction)
  return lift_direction_;
}
inline void LiftTaskInfo::set_lift_direction(::google::protobuf::int32 value) {
  
  lift_direction_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.LiftTaskInfo.lift_direction)
}

// bytes custom_data = 3;
inline void LiftTaskInfo::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LiftTaskInfo::custom_data() const {
  // @@protoc_insertion_point(field_get:wms_commu.LiftTaskInfo.custom_data)
  return custom_data_.GetNoArena();
}
inline void LiftTaskInfo::set_custom_data(const ::std::string& value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.LiftTaskInfo.custom_data)
}
#if LANG_CXX11
inline void LiftTaskInfo::set_custom_data(::std::string&& value) {
  
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.LiftTaskInfo.custom_data)
}
#endif
inline void LiftTaskInfo::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.LiftTaskInfo.custom_data)
}
inline void LiftTaskInfo::set_custom_data(const void* value, size_t size) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.LiftTaskInfo.custom_data)
}
inline ::std::string* LiftTaskInfo::mutable_custom_data() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.LiftTaskInfo.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LiftTaskInfo::release_custom_data() {
  // @@protoc_insertion_point(field_release:wms_commu.LiftTaskInfo.custom_data)
  
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LiftTaskInfo::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    
  } else {
    
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.LiftTaskInfo.custom_data)
}

// -------------------------------------------------------------------

// RollerTaskInfo

// string storage_no = 1;
inline void RollerTaskInfo::clear_storage_no() {
  storage_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollerTaskInfo::storage_no() const {
  // @@protoc_insertion_point(field_get:wms_commu.RollerTaskInfo.storage_no)
  return storage_no_.GetNoArena();
}
inline void RollerTaskInfo::set_storage_no(const ::std::string& value) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.RollerTaskInfo.storage_no)
}
#if LANG_CXX11
inline void RollerTaskInfo::set_storage_no(::std::string&& value) {
  
  storage_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.RollerTaskInfo.storage_no)
}
#endif
inline void RollerTaskInfo::set_storage_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.RollerTaskInfo.storage_no)
}
inline void RollerTaskInfo::set_storage_no(const char* value, size_t size) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.RollerTaskInfo.storage_no)
}
inline ::std::string* RollerTaskInfo::mutable_storage_no() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.RollerTaskInfo.storage_no)
  return storage_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollerTaskInfo::release_storage_no() {
  // @@protoc_insertion_point(field_release:wms_commu.RollerTaskInfo.storage_no)
  
  return storage_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollerTaskInfo::set_allocated_storage_no(::std::string* storage_no) {
  if (storage_no != NULL) {
    
  } else {
    
  }
  storage_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_no);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.RollerTaskInfo.storage_no)
}

// int32 roller_direction = 2;
inline void RollerTaskInfo::clear_roller_direction() {
  roller_direction_ = 0;
}
inline ::google::protobuf::int32 RollerTaskInfo::roller_direction() const {
  // @@protoc_insertion_point(field_get:wms_commu.RollerTaskInfo.roller_direction)
  return roller_direction_;
}
inline void RollerTaskInfo::set_roller_direction(::google::protobuf::int32 value) {
  
  roller_direction_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.RollerTaskInfo.roller_direction)
}

// bytes custom_data = 3;
inline void RollerTaskInfo::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollerTaskInfo::custom_data() const {
  // @@protoc_insertion_point(field_get:wms_commu.RollerTaskInfo.custom_data)
  return custom_data_.GetNoArena();
}
inline void RollerTaskInfo::set_custom_data(const ::std::string& value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.RollerTaskInfo.custom_data)
}
#if LANG_CXX11
inline void RollerTaskInfo::set_custom_data(::std::string&& value) {
  
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.RollerTaskInfo.custom_data)
}
#endif
inline void RollerTaskInfo::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.RollerTaskInfo.custom_data)
}
inline void RollerTaskInfo::set_custom_data(const void* value, size_t size) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.RollerTaskInfo.custom_data)
}
inline ::std::string* RollerTaskInfo::mutable_custom_data() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.RollerTaskInfo.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollerTaskInfo::release_custom_data() {
  // @@protoc_insertion_point(field_release:wms_commu.RollerTaskInfo.custom_data)
  
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollerTaskInfo::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    
  } else {
    
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.RollerTaskInfo.custom_data)
}

// -------------------------------------------------------------------

// TractionTaskInfo

// string storage_no = 1;
inline void TractionTaskInfo::clear_storage_no() {
  storage_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TractionTaskInfo::storage_no() const {
  // @@protoc_insertion_point(field_get:wms_commu.TractionTaskInfo.storage_no)
  return storage_no_.GetNoArena();
}
inline void TractionTaskInfo::set_storage_no(const ::std::string& value) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.TractionTaskInfo.storage_no)
}
#if LANG_CXX11
inline void TractionTaskInfo::set_storage_no(::std::string&& value) {
  
  storage_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.TractionTaskInfo.storage_no)
}
#endif
inline void TractionTaskInfo::set_storage_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.TractionTaskInfo.storage_no)
}
inline void TractionTaskInfo::set_storage_no(const char* value, size_t size) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.TractionTaskInfo.storage_no)
}
inline ::std::string* TractionTaskInfo::mutable_storage_no() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.TractionTaskInfo.storage_no)
  return storage_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TractionTaskInfo::release_storage_no() {
  // @@protoc_insertion_point(field_release:wms_commu.TractionTaskInfo.storage_no)
  
  return storage_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TractionTaskInfo::set_allocated_storage_no(::std::string* storage_no) {
  if (storage_no != NULL) {
    
  } else {
    
  }
  storage_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_no);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.TractionTaskInfo.storage_no)
}

// int32 direction = 2;
inline void TractionTaskInfo::clear_direction() {
  direction_ = 0;
}
inline ::google::protobuf::int32 TractionTaskInfo::direction() const {
  // @@protoc_insertion_point(field_get:wms_commu.TractionTaskInfo.direction)
  return direction_;
}
inline void TractionTaskInfo::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.TractionTaskInfo.direction)
}

// bytes custom_data = 3;
inline void TractionTaskInfo::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TractionTaskInfo::custom_data() const {
  // @@protoc_insertion_point(field_get:wms_commu.TractionTaskInfo.custom_data)
  return custom_data_.GetNoArena();
}
inline void TractionTaskInfo::set_custom_data(const ::std::string& value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.TractionTaskInfo.custom_data)
}
#if LANG_CXX11
inline void TractionTaskInfo::set_custom_data(::std::string&& value) {
  
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.TractionTaskInfo.custom_data)
}
#endif
inline void TractionTaskInfo::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.TractionTaskInfo.custom_data)
}
inline void TractionTaskInfo::set_custom_data(const void* value, size_t size) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.TractionTaskInfo.custom_data)
}
inline ::std::string* TractionTaskInfo::mutable_custom_data() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.TractionTaskInfo.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TractionTaskInfo::release_custom_data() {
  // @@protoc_insertion_point(field_release:wms_commu.TractionTaskInfo.custom_data)
  
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TractionTaskInfo::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    
  } else {
    
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.TractionTaskInfo.custom_data)
}

// -------------------------------------------------------------------

// SubTaskData

// int32 type = 1;
inline void SubTaskData::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 SubTaskData::type() const {
  // @@protoc_insertion_point(field_get:wms_commu.SubTaskData.type)
  return type_;
}
inline void SubTaskData::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.SubTaskData.type)
}

// bytes data = 2;
inline void SubTaskData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SubTaskData::data() const {
  // @@protoc_insertion_point(field_get:wms_commu.SubTaskData.data)
  return data_.GetNoArena();
}
inline void SubTaskData::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.SubTaskData.data)
}
#if LANG_CXX11
inline void SubTaskData::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.SubTaskData.data)
}
#endif
inline void SubTaskData::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.SubTaskData.data)
}
inline void SubTaskData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.SubTaskData.data)
}
inline ::std::string* SubTaskData::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.SubTaskData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SubTaskData::release_data() {
  // @@protoc_insertion_point(field_release:wms_commu.SubTaskData.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SubTaskData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.SubTaskData.data)
}

// -------------------------------------------------------------------

// WmsTaskInfo

// string task_id = 1;
inline void WmsTaskInfo::clear_task_id() {
  task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WmsTaskInfo::task_id() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskInfo.task_id)
  return task_id_.GetNoArena();
}
inline void WmsTaskInfo::set_task_id(const ::std::string& value) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskInfo.task_id)
}
#if LANG_CXX11
inline void WmsTaskInfo::set_task_id(::std::string&& value) {
  
  task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.WmsTaskInfo.task_id)
}
#endif
inline void WmsTaskInfo::set_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.WmsTaskInfo.task_id)
}
inline void WmsTaskInfo::set_task_id(const char* value, size_t size) {
  
  task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.WmsTaskInfo.task_id)
}
inline ::std::string* WmsTaskInfo::mutable_task_id() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.WmsTaskInfo.task_id)
  return task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WmsTaskInfo::release_task_id() {
  // @@protoc_insertion_point(field_release:wms_commu.WmsTaskInfo.task_id)
  
  return task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WmsTaskInfo::set_allocated_task_id(::std::string* task_id) {
  if (task_id != NULL) {
    
  } else {
    
  }
  task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_id);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.WmsTaskInfo.task_id)
}

// bool execute_by_order = 2;
inline void WmsTaskInfo::clear_execute_by_order() {
  execute_by_order_ = false;
}
inline bool WmsTaskInfo::execute_by_order() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskInfo.execute_by_order)
  return execute_by_order_;
}
inline void WmsTaskInfo::set_execute_by_order(bool value) {
  
  execute_by_order_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskInfo.execute_by_order)
}

// bool can_skip = 3;
inline void WmsTaskInfo::clear_can_skip() {
  can_skip_ = false;
}
inline bool WmsTaskInfo::can_skip() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskInfo.can_skip)
  return can_skip_;
}
inline void WmsTaskInfo::set_can_skip(bool value) {
  
  can_skip_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskInfo.can_skip)
}

// repeated .wms_commu.SubTaskData sub_task_data = 4;
inline int WmsTaskInfo::sub_task_data_size() const {
  return sub_task_data_.size();
}
inline void WmsTaskInfo::clear_sub_task_data() {
  sub_task_data_.Clear();
}
inline const ::wms_commu::SubTaskData& WmsTaskInfo::sub_task_data(int index) const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskInfo.sub_task_data)
  return sub_task_data_.Get(index);
}
inline ::wms_commu::SubTaskData* WmsTaskInfo::mutable_sub_task_data(int index) {
  // @@protoc_insertion_point(field_mutable:wms_commu.WmsTaskInfo.sub_task_data)
  return sub_task_data_.Mutable(index);
}
inline ::wms_commu::SubTaskData* WmsTaskInfo::add_sub_task_data() {
  // @@protoc_insertion_point(field_add:wms_commu.WmsTaskInfo.sub_task_data)
  return sub_task_data_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::wms_commu::SubTaskData >*
WmsTaskInfo::mutable_sub_task_data() {
  // @@protoc_insertion_point(field_mutable_list:wms_commu.WmsTaskInfo.sub_task_data)
  return &sub_task_data_;
}
inline const ::google::protobuf::RepeatedPtrField< ::wms_commu::SubTaskData >&
WmsTaskInfo::sub_task_data() const {
  // @@protoc_insertion_point(field_list:wms_commu.WmsTaskInfo.sub_task_data)
  return sub_task_data_;
}

// bytes custom_data = 5;
inline void WmsTaskInfo::clear_custom_data() {
  custom_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WmsTaskInfo::custom_data() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskInfo.custom_data)
  return custom_data_.GetNoArena();
}
inline void WmsTaskInfo::set_custom_data(const ::std::string& value) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskInfo.custom_data)
}
#if LANG_CXX11
inline void WmsTaskInfo::set_custom_data(::std::string&& value) {
  
  custom_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.WmsTaskInfo.custom_data)
}
#endif
inline void WmsTaskInfo::set_custom_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.WmsTaskInfo.custom_data)
}
inline void WmsTaskInfo::set_custom_data(const void* value, size_t size) {
  
  custom_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.WmsTaskInfo.custom_data)
}
inline ::std::string* WmsTaskInfo::mutable_custom_data() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.WmsTaskInfo.custom_data)
  return custom_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WmsTaskInfo::release_custom_data() {
  // @@protoc_insertion_point(field_release:wms_commu.WmsTaskInfo.custom_data)
  
  return custom_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WmsTaskInfo::set_allocated_custom_data(::std::string* custom_data) {
  if (custom_data != NULL) {
    
  } else {
    
  }
  custom_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), custom_data);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.WmsTaskInfo.custom_data)
}

// bool goto_pack_station = 6;
inline void WmsTaskInfo::clear_goto_pack_station() {
  goto_pack_station_ = false;
}
inline bool WmsTaskInfo::goto_pack_station() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskInfo.goto_pack_station)
  return goto_pack_station_;
}
inline void WmsTaskInfo::set_goto_pack_station(bool value) {
  
  goto_pack_station_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskInfo.goto_pack_station)
}

// -------------------------------------------------------------------

// WmsTaskData

// int32 source = 1;
inline void WmsTaskData::clear_source() {
  source_ = 0;
}
inline ::google::protobuf::int32 WmsTaskData::source() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskData.source)
  return source_;
}
inline void WmsTaskData::set_source(::google::protobuf::int32 value) {
  
  source_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskData.source)
}

// int32 task_type = 2;
inline void WmsTaskData::clear_task_type() {
  task_type_ = 0;
}
inline ::google::protobuf::int32 WmsTaskData::task_type() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskData.task_type)
  return task_type_;
}
inline void WmsTaskData::set_task_type(::google::protobuf::int32 value) {
  
  task_type_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskData.task_type)
}

// repeated bytes task_data = 3;
inline int WmsTaskData::task_data_size() const {
  return task_data_.size();
}
inline void WmsTaskData::clear_task_data() {
  task_data_.Clear();
}
inline const ::std::string& WmsTaskData::task_data(int index) const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskData.task_data)
  return task_data_.Get(index);
}
inline ::std::string* WmsTaskData::mutable_task_data(int index) {
  // @@protoc_insertion_point(field_mutable:wms_commu.WmsTaskData.task_data)
  return task_data_.Mutable(index);
}
inline void WmsTaskData::set_task_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskData.task_data)
  task_data_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void WmsTaskData::set_task_data(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskData.task_data)
  task_data_.Mutable(index)->assign(std::move(value));
}
#endif
inline void WmsTaskData::set_task_data(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  task_data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wms_commu.WmsTaskData.task_data)
}
inline void WmsTaskData::set_task_data(int index, const void* value, size_t size) {
  task_data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wms_commu.WmsTaskData.task_data)
}
inline ::std::string* WmsTaskData::add_task_data() {
  // @@protoc_insertion_point(field_add_mutable:wms_commu.WmsTaskData.task_data)
  return task_data_.Add();
}
inline void WmsTaskData::add_task_data(const ::std::string& value) {
  task_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wms_commu.WmsTaskData.task_data)
}
#if LANG_CXX11
inline void WmsTaskData::add_task_data(::std::string&& value) {
  task_data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:wms_commu.WmsTaskData.task_data)
}
#endif
inline void WmsTaskData::add_task_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  task_data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wms_commu.WmsTaskData.task_data)
}
inline void WmsTaskData::add_task_data(const void* value, size_t size) {
  task_data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wms_commu.WmsTaskData.task_data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
WmsTaskData::task_data() const {
  // @@protoc_insertion_point(field_list:wms_commu.WmsTaskData.task_data)
  return task_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
WmsTaskData::mutable_task_data() {
  // @@protoc_insertion_point(field_mutable_list:wms_commu.WmsTaskData.task_data)
  return &task_data_;
}

// int32 robot_id = 4;
inline void WmsTaskData::clear_robot_id() {
  robot_id_ = 0;
}
inline ::google::protobuf::int32 WmsTaskData::robot_id() const {
  // @@protoc_insertion_point(field_get:wms_commu.WmsTaskData.robot_id)
  return robot_id_;
}
inline void WmsTaskData::set_robot_id(::google::protobuf::int32 value) {
  
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.WmsTaskData.robot_id)
}

// -------------------------------------------------------------------

// DoTaskRequest

// .wms_commu.WmsTaskData wms_task = 1;
inline bool DoTaskRequest::has_wms_task() const {
  return this != internal_default_instance() && wms_task_ != NULL;
}
inline void DoTaskRequest::clear_wms_task() {
  if (GetArenaNoVirtual() == NULL && wms_task_ != NULL) {
    delete wms_task_;
  }
  wms_task_ = NULL;
}
inline const ::wms_commu::WmsTaskData& DoTaskRequest::wms_task() const {
  const ::wms_commu::WmsTaskData* p = wms_task_;
  // @@protoc_insertion_point(field_get:wms_commu.DoTaskRequest.wms_task)
  return p != NULL ? *p : *reinterpret_cast<const ::wms_commu::WmsTaskData*>(
      &::wms_commu::_WmsTaskData_default_instance_);
}
inline ::wms_commu::WmsTaskData* DoTaskRequest::release_wms_task() {
  // @@protoc_insertion_point(field_release:wms_commu.DoTaskRequest.wms_task)
  
  ::wms_commu::WmsTaskData* temp = wms_task_;
  wms_task_ = NULL;
  return temp;
}
inline ::wms_commu::WmsTaskData* DoTaskRequest::mutable_wms_task() {
  
  if (wms_task_ == NULL) {
    wms_task_ = new ::wms_commu::WmsTaskData;
  }
  // @@protoc_insertion_point(field_mutable:wms_commu.DoTaskRequest.wms_task)
  return wms_task_;
}
inline void DoTaskRequest::set_allocated_wms_task(::wms_commu::WmsTaskData* wms_task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete wms_task_;
  }
  if (wms_task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wms_task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wms_task, submessage_arena);
    }
    
  } else {
    
  }
  wms_task_ = wms_task;
  // @@protoc_insertion_point(field_set_allocated:wms_commu.DoTaskRequest.wms_task)
}

// -------------------------------------------------------------------

// CancelTaskRequest

// string wms_task_id = 1;
inline void CancelTaskRequest::clear_wms_task_id() {
  wms_task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelTaskRequest::wms_task_id() const {
  // @@protoc_insertion_point(field_get:wms_commu.CancelTaskRequest.wms_task_id)
  return wms_task_id_.GetNoArena();
}
inline void CancelTaskRequest::set_wms_task_id(const ::std::string& value) {
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.CancelTaskRequest.wms_task_id)
}
#if LANG_CXX11
inline void CancelTaskRequest::set_wms_task_id(::std::string&& value) {
  
  wms_task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.CancelTaskRequest.wms_task_id)
}
#endif
inline void CancelTaskRequest::set_wms_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.CancelTaskRequest.wms_task_id)
}
inline void CancelTaskRequest::set_wms_task_id(const char* value, size_t size) {
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.CancelTaskRequest.wms_task_id)
}
inline ::std::string* CancelTaskRequest::mutable_wms_task_id() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.CancelTaskRequest.wms_task_id)
  return wms_task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelTaskRequest::release_wms_task_id() {
  // @@protoc_insertion_point(field_release:wms_commu.CancelTaskRequest.wms_task_id)
  
  return wms_task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelTaskRequest::set_allocated_wms_task_id(::std::string* wms_task_id) {
  if (wms_task_id != NULL) {
    
  } else {
    
  }
  wms_task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wms_task_id);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.CancelTaskRequest.wms_task_id)
}

// -------------------------------------------------------------------

// DoTaskResponse

// string wms_task_id = 1;
inline void DoTaskResponse::clear_wms_task_id() {
  wms_task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DoTaskResponse::wms_task_id() const {
  // @@protoc_insertion_point(field_get:wms_commu.DoTaskResponse.wms_task_id)
  return wms_task_id_.GetNoArena();
}
inline void DoTaskResponse::set_wms_task_id(const ::std::string& value) {
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.DoTaskResponse.wms_task_id)
}
#if LANG_CXX11
inline void DoTaskResponse::set_wms_task_id(::std::string&& value) {
  
  wms_task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.DoTaskResponse.wms_task_id)
}
#endif
inline void DoTaskResponse::set_wms_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.DoTaskResponse.wms_task_id)
}
inline void DoTaskResponse::set_wms_task_id(const char* value, size_t size) {
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.DoTaskResponse.wms_task_id)
}
inline ::std::string* DoTaskResponse::mutable_wms_task_id() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.DoTaskResponse.wms_task_id)
  return wms_task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DoTaskResponse::release_wms_task_id() {
  // @@protoc_insertion_point(field_release:wms_commu.DoTaskResponse.wms_task_id)
  
  return wms_task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DoTaskResponse::set_allocated_wms_task_id(::std::string* wms_task_id) {
  if (wms_task_id != NULL) {
    
  } else {
    
  }
  wms_task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wms_task_id);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.DoTaskResponse.wms_task_id)
}

// string robot_id = 2;
inline void DoTaskResponse::clear_robot_id() {
  robot_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DoTaskResponse::robot_id() const {
  // @@protoc_insertion_point(field_get:wms_commu.DoTaskResponse.robot_id)
  return robot_id_.GetNoArena();
}
inline void DoTaskResponse::set_robot_id(const ::std::string& value) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.DoTaskResponse.robot_id)
}
#if LANG_CXX11
inline void DoTaskResponse::set_robot_id(::std::string&& value) {
  
  robot_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.DoTaskResponse.robot_id)
}
#endif
inline void DoTaskResponse::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.DoTaskResponse.robot_id)
}
inline void DoTaskResponse::set_robot_id(const char* value, size_t size) {
  
  robot_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.DoTaskResponse.robot_id)
}
inline ::std::string* DoTaskResponse::mutable_robot_id() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.DoTaskResponse.robot_id)
  return robot_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DoTaskResponse::release_robot_id() {
  // @@protoc_insertion_point(field_release:wms_commu.DoTaskResponse.robot_id)
  
  return robot_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DoTaskResponse::set_allocated_robot_id(::std::string* robot_id) {
  if (robot_id != NULL) {
    
  } else {
    
  }
  robot_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_id);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.DoTaskResponse.robot_id)
}

// string robot_no = 3;
inline void DoTaskResponse::clear_robot_no() {
  robot_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DoTaskResponse::robot_no() const {
  // @@protoc_insertion_point(field_get:wms_commu.DoTaskResponse.robot_no)
  return robot_no_.GetNoArena();
}
inline void DoTaskResponse::set_robot_no(const ::std::string& value) {
  
  robot_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.DoTaskResponse.robot_no)
}
#if LANG_CXX11
inline void DoTaskResponse::set_robot_no(::std::string&& value) {
  
  robot_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.DoTaskResponse.robot_no)
}
#endif
inline void DoTaskResponse::set_robot_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  robot_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.DoTaskResponse.robot_no)
}
inline void DoTaskResponse::set_robot_no(const char* value, size_t size) {
  
  robot_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.DoTaskResponse.robot_no)
}
inline ::std::string* DoTaskResponse::mutable_robot_no() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.DoTaskResponse.robot_no)
  return robot_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DoTaskResponse::release_robot_no() {
  // @@protoc_insertion_point(field_release:wms_commu.DoTaskResponse.robot_no)
  
  return robot_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DoTaskResponse::set_allocated_robot_no(::std::string* robot_no) {
  if (robot_no != NULL) {
    
  } else {
    
  }
  robot_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_no);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.DoTaskResponse.robot_no)
}

// -------------------------------------------------------------------

// TaskProgressNotify

// string wms_task_id = 1;
inline void TaskProgressNotify::clear_wms_task_id() {
  wms_task_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskProgressNotify::wms_task_id() const {
  // @@protoc_insertion_point(field_get:wms_commu.TaskProgressNotify.wms_task_id)
  return wms_task_id_.GetNoArena();
}
inline void TaskProgressNotify::set_wms_task_id(const ::std::string& value) {
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.TaskProgressNotify.wms_task_id)
}
#if LANG_CXX11
inline void TaskProgressNotify::set_wms_task_id(::std::string&& value) {
  
  wms_task_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.TaskProgressNotify.wms_task_id)
}
#endif
inline void TaskProgressNotify::set_wms_task_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.TaskProgressNotify.wms_task_id)
}
inline void TaskProgressNotify::set_wms_task_id(const char* value, size_t size) {
  
  wms_task_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.TaskProgressNotify.wms_task_id)
}
inline ::std::string* TaskProgressNotify::mutable_wms_task_id() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.TaskProgressNotify.wms_task_id)
  return wms_task_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskProgressNotify::release_wms_task_id() {
  // @@protoc_insertion_point(field_release:wms_commu.TaskProgressNotify.wms_task_id)
  
  return wms_task_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskProgressNotify::set_allocated_wms_task_id(::std::string* wms_task_id) {
  if (wms_task_id != NULL) {
    
  } else {
    
  }
  wms_task_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), wms_task_id);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.TaskProgressNotify.wms_task_id)
}

// string storage_no = 2;
inline void TaskProgressNotify::clear_storage_no() {
  storage_no_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TaskProgressNotify::storage_no() const {
  // @@protoc_insertion_point(field_get:wms_commu.TaskProgressNotify.storage_no)
  return storage_no_.GetNoArena();
}
inline void TaskProgressNotify::set_storage_no(const ::std::string& value) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wms_commu.TaskProgressNotify.storage_no)
}
#if LANG_CXX11
inline void TaskProgressNotify::set_storage_no(::std::string&& value) {
  
  storage_no_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wms_commu.TaskProgressNotify.storage_no)
}
#endif
inline void TaskProgressNotify::set_storage_no(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wms_commu.TaskProgressNotify.storage_no)
}
inline void TaskProgressNotify::set_storage_no(const char* value, size_t size) {
  
  storage_no_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wms_commu.TaskProgressNotify.storage_no)
}
inline ::std::string* TaskProgressNotify::mutable_storage_no() {
  
  // @@protoc_insertion_point(field_mutable:wms_commu.TaskProgressNotify.storage_no)
  return storage_no_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskProgressNotify::release_storage_no() {
  // @@protoc_insertion_point(field_release:wms_commu.TaskProgressNotify.storage_no)
  
  return storage_no_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskProgressNotify::set_allocated_storage_no(::std::string* storage_no) {
  if (storage_no != NULL) {
    
  } else {
    
  }
  storage_no_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storage_no);
  // @@protoc_insertion_point(field_set_allocated:wms_commu.TaskProgressNotify.storage_no)
}

// int32 status = 3;
inline void TaskProgressNotify::clear_status() {
  status_ = 0;
}
inline ::google::protobuf::int32 TaskProgressNotify::status() const {
  // @@protoc_insertion_point(field_get:wms_commu.TaskProgressNotify.status)
  return status_;
}
inline void TaskProgressNotify::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:wms_commu.TaskProgressNotify.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wms_commu

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_wms_5fcommu_2eproto__INCLUDED
